generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id              BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  publicId        String   @unique @db.VarChar(16)
  displayName     String?  @db.VarChar(100)
  photoHash       String?  @db.VarChar(32)
  email           String   @unique @db.VarChar(320)
  passwordHash    String?  @db.Text
  emailVerifiedAt DateTime @updatedAt @db.Timestamp(0)
  updatedAt       DateTime @updatedAt @db.Timestamp(0)
  createdAt       DateTime @default(now()) @db.Timestamp(0)

  sessions            AccountSession[]
  federatedIdentities AccountFederatedIdentities[]
}

enum SessionType {
  FEDERATED_IDENTITY
  EMAIL
}

model AccountSession {
  id        BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  accountId BigInt      @db.UnsignedBigInt
  type      SessionType
  revokedAt DateTime?   @db.Timestamp(0)
  createdAt DateTime    @default(now()) @db.Timestamp(0)

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  tokens   AccountSessionTokens[]
  activity AccountActivity[]

  @@index([accountId])
}

model AccountSessionTokens {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  sessionId BigInt   @db.UnsignedBigInt
  visitorId BigInt   @unique @db.UnsignedBigInt
  token     String   @unique @db.VarChar(100)
  ref       String?  @unique @db.VarChar(100)
  expires   DateTime @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  session AccountSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  visitor Visitor        @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

model AccountFederatedIdentities {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  accountId BigInt   @db.UnsignedBigInt
  provider  Provider
  userId    String   @db.VarChar(100)
  email     String   @db.VarChar(320)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@index([accountId])
}

model Visitor {
  id                   BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  publicId             String                @unique @db.VarChar(16)
  userAgent            String                @db.VarChar(200)
  ipAddress            String                @db.VarChar(128)
  counterCode          String?               @db.Char(2)
  region               String?               @db.VarChar(100)
  city                 String?               @db.VarChar(100)
  isp                  String?               @db.VarChar(100)
  createdAt            DateTime              @default(now()) @db.Timestamp(0)
  accountActivity      AccountActivity[]
  accountSessionTokens AccountSessionTokens?
}

model AccountActivity {
  id        BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  sessionId BigInt         @db.UnsignedBigInt
  visitorId BigInt         @db.UnsignedBigInt
  publicId  String         @unique @db.VarChar(16)
  event     String         @db.VarChar(100)
  createdAt DateTime       @default(now()) @db.Timestamp(0)
  session   AccountSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  visitor   Visitor        @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([visitorId])
}

enum Provider {
  GOOGLE
  APPLE
  META
  MICROSOFT
  TWITTER
}

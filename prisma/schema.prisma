generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = ""
  relationMode      = "prisma"
}

model Account {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  publicId              String    @unique @db.VarChar(16)
  displayName           String?   @db.VarChar(100)
  countryCode           String    @db.Char(2)
  photoHash             String?   @db.VarChar(32)
  email                 String    @unique @db.VarChar(320)
  passwordHash          String?   @db.Text
  emailVerifiedAt       DateTime  @db.Timestamp(0)
  phoneCountryCode      String?   @db.VarChar(4)
  phoneNumber           String?   @db.VarChar(10)
  phoneVerifiedAt       DateTime? @db.Timestamp(0)
  mfaEmail              DateTime? @db.Timestamp(0)
  mfaSMS                DateTime? @db.Timestamp(0)
  mfaWhatsapp           DateTime? @db.Timestamp(0)
  mfaAppKey             String?   @db.Char(16)
  passwordLoginUnlocked DateTime? @db.Timestamp(0)
  mfaLoginUnlocked      DateTime? @db.Timestamp(0)
  updatedAt             DateTime  @updatedAt @db.Timestamp(0)
  createdAt             DateTime  @default(now()) @db.Timestamp(0)

  sessions            AccountSession[]
  federatedIdentities AccountFederatedIdentities[]

  @@unique([phoneCountryCode, phoneNumber])
}

enum SessionType {
  FEDERATED_IDENTITY
  EMAIL
}

model AccountSession {
  id        BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  publicId  String      @unique @db.VarChar(16)
  accountId BigInt      @db.UnsignedBigInt
  type      SessionType
  revokedAt DateTime?   @db.Timestamp(0)
  createdAt DateTime    @default(now()) @db.Timestamp(0)

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  tokens AccountSessionTokens[]

  @@index([accountId])
}

model AccountSessionTokens {
  id          BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  publicId    String             @unique @db.VarChar(16)
  sessionId   BigInt             @db.UnsignedBigInt
  visitorId   BigInt             @unique @db.UnsignedBigInt
  token       String             @unique @db.VarChar(100)
  ref         String?            @unique @db.VarChar(100)
  expires     DateTime           @db.Timestamp(0)
  accessLevel SessionAccessLevel
  updatedAt   DateTime           @updatedAt @db.Timestamp(0)
  createdAt   DateTime           @default(now()) @db.Timestamp(0)

  session  AccountSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  visitor  Visitor           @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  activity AccountActivity[]

  @@index([sessionId])
}

enum SessionAccessLevel {
  NONE
  MEDIUM
}

model AccountFederatedIdentities {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  accountId BigInt   @db.UnsignedBigInt
  provider  Provider
  userId    String   @db.VarChar(100)
  email     String   @db.VarChar(320)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@index([accountId])
}

model Visitor {
  id                   BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  publicId             String                @unique @db.VarChar(16)
  userAgent            String                @db.VarChar(200)
  ipAddress            String                @db.VarChar(128)
  counterCode          String?               @db.Char(2)
  region               String?               @db.VarChar(100)
  city                 String?               @db.VarChar(100)
  isp                  String?               @db.VarChar(100)
  createdAt            DateTime              @default(now()) @db.Timestamp(0)
  accountActivity      AccountActivity[]
  accountSessionTokens AccountSessionTokens?
}

model AccountActivity {
  id             BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  sessionTokenId BigInt                @db.UnsignedBigInt
  visitorId      BigInt                @db.UnsignedBigInt
  publicId       String                @unique @db.VarChar(16)
  operationType  ActivityOperationType
  action         ActivityAction
  createdAt      DateTime              @default(now()) @db.Timestamp(0)
  data           AccountActivityData[]
  sessionToken   AccountSessionTokens  @relation(fields: [sessionTokenId], references: [id], onDelete: Cascade)
  visitor        Visitor               @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@index([sessionTokenId])
  @@index([visitorId])
}

model AccountActivityData {
  id         BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  activityId BigInt          @db.UnsignedBigInt
  key        String          @db.VarChar(100)
  value      String          @db.VarChar(500)
  activity   AccountActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([activityId])
}

enum ActivityOperationType {
  NOTIFY
  UPDATE
  CREATE
  DELETE
}

enum ActivityAction {
  NEW_AUTHENTICATION
  PASSWORD_RECOVERED
  PASSWORD_UPDATED
  PASSWORD_ADDED
  EMAIL_UPDATED
  PHONE_UPDATED
  PHONE_ADDED
  PHONE_DELETE
  SESSION_REVOKED
  ALL_SESSIONS_REVOKED
  PHOTO_UPDATED
  PHOTO_ADDED
  ACCOUNT_DATA_UPDATED
  ACCOUNT_PASSWORD_LOCKED
  ACCOUNT_MFA_LOCKED
  // Multi-factor
  MFA_SMS_ADDED
  MFA_EMAIL_ADDED
  MFA_APP_ADDED
  MFA_WHATSAPP_ADDED
  MFA_SMS_REMOVED
  MFA_EMAIL_REMOVED
  MFA_APP_REMOVED
  MFA_WHATSAPP_REMOVED
  // Provider
  GOOGLE_PROVIDER_CONNECTED
  GITHUB_PROVIDER_CONNECTED
  FACEBOOK_PROVIDER_CONNECTED
  TWITTER_PROVIDER_CONNECTED
  MICROSOFT_PROVIDER_CONNECTED
  GOOGLE_PROVIDER_DISCONNECTED
  GITHUB_PROVIDER_DISCONNECTED
  FACEBOOK_PROVIDER_DISCONNECTED
  TWITTER_PROVIDER_DISCONNECTED
  MICROSOFT_PROVIDER_DISCONNECTED
}

enum Provider {
  GOOGLE
  APPLE
  META
  MICROSOFT
  TWITTER
  GITHUB
}

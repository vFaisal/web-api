generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_DEVELOPMENT_URL")
  relationMode = "prisma"
}

model Account {
  id             BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  publicId       String   @unique @db.VarChar(16)
  displayName    String?  @db.VarChar(100)
  email          String   @unique @db.VarChar(320)
  passwordHash   String?  @db.Text
  verificationId BigInt   @unique @db.UnsignedBigInt
  updatedAt      DateTime @updatedAt @db.Timestamp(0)
  createdAt      DateTime @default(now()) @db.Timestamp(0)

  verification OTPVerification @relation(fields: [verificationId], references: [id])

  sessions            AccountSession[]
  federatedIdentities AccountFederatedIdentities[]
}

model OTPVerification {
  id              BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  phoneOrEmail    String                @db.VarChar(320)
  type            OPTVerificationType
  signature       String                @unique @db.VarChar(128)
  hashCode        String                @db.Text
  attempts        Int                   @default(0) @db.UnsignedTinyInt
  allowedAttempts Int                   @default(10) @db.UnsignedTinyInt
  intent          OPTVerificationIntent
  expires         DateTime              @db.Timestamp(0)
  verifiedAt      DateTime?             @db.Timestamp(0)
  createdAt       DateTime              @default(now()) @db.Timestamp(0)
  account         Account?

  @@index([phoneOrEmail])
}

enum SessionType {
  FEDERATED_IDENTITY
  EMAIL
}

model AccountSession {
  id        BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  accountId BigInt      @db.UnsignedBigInt
  type      SessionType
  revokedAt DateTime?   @db.Timestamp(0)
  createdAt DateTime    @default(now()) @db.Timestamp(0)

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  tokens   AccountSessionTokens[]
  activity AccountActivity[]

  @@index([accountId])
}

model AccountSessionTokens {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  sessionId BigInt   @db.UnsignedBigInt
  visitorId BigInt   @unique @db.UnsignedBigInt
  token     String   @unique @db.VarChar(32)
  expires   DateTime @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  session AccountSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  visitor Visitor        @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

model AccountFederatedIdentities {
  id                BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  accountId         BigInt   @db.UnsignedBigInt
  provider          Provider
  providerAccountId String   @db.VarChar(100)
  createdAt         DateTime @default(now()) @db.Timestamp(0)
  account           Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([accountId])
}

model Visitor {
  id                   BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  publicId             String                @unique @db.VarChar(16)
  userAgent            String                @db.VarChar(200)
  ipAddress            Int                   @db.UnsignedInt
  counterCode          String                @db.Char(2)
  region               String                @db.VarChar(100)
  city                 String                @db.VarChar(100)
  isp                  String                @db.VarChar(100)
  createdAt            DateTime              @default(now()) @db.Timestamp(0)
  accountActivity      AccountActivity[]
  accountSessionTokens AccountSessionTokens?
}

model AccountActivity {
  id        BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  sessionId BigInt         @db.UnsignedBigInt
  visitorId BigInt         @db.UnsignedBigInt
  publicId  String         @unique @db.VarChar(16)
  event     String         @db.VarChar(100)
  createdAt DateTime       @default(now()) @db.Timestamp(0)
  session   AccountSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  visitor   Visitor        @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([visitorId])
}

enum OPTVerificationIntent {
  REGISTRATION
}

enum OPTVerificationType {
  EMAIL
  PHONE
}

enum Provider {
  GOOGLE
  APPLE
  META
  MICROSOFT
  TWITTER
}
